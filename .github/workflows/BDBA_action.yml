name: BDBA
on:
  workflow_call:
    inputs:
      org:
        description: 'Enter Project organizational repo to run BDBA scan (ex: intel-innersource):'
        required: true
        type: string
      repo:
        description: 'Enter Project repo for which you want to run BDBA scan (ex: frameworks.ai.infrastructure.code-scan-tools):'
        required: true
        type: string
      refs:
        description: 'Enter Project branch, tag:'
        required: true
        type: string
      group:
        description: 'Enter BDBA group (ex: 32):'
        required: true
        type: string
      runners:
        required: false
        type: string
        description: Runners labels on which scan should be executed
        default: "['self-hosted', 'Linux']"
      bdba_baseurl:
        description: 'URL to the BDBA server (ending in intel.com)'
        required: true
        default: 'https://bdba001.icloud.intel.com'
        type: string
      bdba_group:
        description: 'Business Unit or team within BDBA'
        required: true
        type: string
      bdba_binary:
        description: 'Path the binary to be scanned relative to the workspace'
        required: true
        type: string
      components_task_id:
        description: 'SD Elements task ID for labeling the BDBA components report'
        default: 'CT36'
        required: false
        type: string
      cve_task_id:
        description: 'SD Elements task ID for labeling the BDBA CVE report'
        default: 'CT7'
        required: false
        type: string
      sdl_project_id:
        description: 'SD Elements project ID (usually 4-6 digits) used for SDL evidence'
        required: false
        default: '0'
        type: string
      setpriv_uid:
        description: 'If run as root, lower priviliges to the specified UID'
        required: false
        type: number
      setpriv_gid:
        description: 'If run as root, lower priviliges to the specified GID'
        required: false
        type: number
      ignore_vulnerabilities:
        description: 'Return an exit code of 0 even if vulnerabilities were found'
        required: false
        default: 'false'
        type: string
      ignore_triaged:
        description: 'Return an exit code of 0 if all vulnerabilities marked as triaged'
        required: false
        default: 'false'
        type: string
    secrets:
      BDBA_TOKEN:
        description: 'Enter BDBA Token:'
        required: true
      token:
        description: 'GITHUB_TOKEN or a repo scoped PAT.'
        required: true
jobs:
  bdba_scan:
    name: BDBA Scan
    runs-on: ${{ fromJson(inputs.runners) }}
    steps:
      - id: bdba
        run: ./.github/workflows/BDBA/bdba.sh
        shell: bash
        env:
          BDBA_BASEURL: ${{ inputs.bdba_baseurl }}
          BDBA_GROUP: ${{ inputs.bdba_group }}
          BDBA_BINARY: ${{ inputs.bdba_binary }}
          CVE_TASK_ID: ${{ inputs.cve_task_id }}
          COMPONENTS_TASK_ID: ${{ inputs.components_task_id }}
          IGNORE_VULNS: ${{ inputs.ignore_vulnerabilities }}
          SDL_PROJECT_ID: ${{ inputs.sdl_project_id }}
          SETPRIV_UID: ${{ inputs.setpriv_uid }}
          SETPRIV_GID: ${{ inputs.setpriv_gid }}
          IGNORE_TRIAGED: ${{ inputs.ignore_triaged }}
      - name: Upload BDBA CVE reports to GitHub Actions Artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.cve_task_id }}_bdba_cve_report
          path: ${{ github.workspace }}/${{ inputs.cve_task_id }}_bdba_*
      - name: Upload BDBA Components reports to GitHub Actions Artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.components_task_id }}_bdba_component_report
          path: ${{ github.workspace }}/${{ inputs.components_task_id }}_*BDBA-components.csv